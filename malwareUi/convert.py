import sys
import os
from math import log
import numpy as np
import scipy as sp
from PIL import Image
import matplotlib.pyplot as plt
from flask import request
from flask_cors import CORS
from distutils.log import debug
from flask import Flask, jsonify
import keras
import cv2
import sys
from tensorflow import keras
import tensorflow as tf
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization
import os

app = Flask(__name__)
CORS(app)


@app.route('/', methods=['GET', 'POST'])
def convertor():
    data = request.get_data()
    data = data.decode("utf-8")
    imgPath = data.replace('name=', '')
    passedIndex = imgPath[-1]
    imgPath = imgPath[:-1]
    print("here is the passed image", imgPath)
    readFromHere = "images\\" + imgPath
    f = open(readFromHere)
    print("image has been read")
    array = []
    for line in f:
        xx = line.split()
        if len(xx) != 17:
            continue
        array.append([int(i, 16) if i != '??' else 0 for i in xx[1:]])
    f.close()
    array = np.array(array)
    if array.shape[1] != 16:
        assert(False)
    b = int((array.shape[0]*16)**(0.5))
    b = 2**(int(np.log(b)/np.log(2))+1)
    a = int(array.shape[0]*16/b)
    array = array[:a*b//16, :]
    array = np.reshape(array, (a, b))
    im = Image.fromarray(np.uint8(array))
    finalPath = "images\image1.png"
    print("image is created")
    im.save(finalPath, "PNG")
    return finalPath


if __name__ == "__main__":
    app.run(debug=True)
